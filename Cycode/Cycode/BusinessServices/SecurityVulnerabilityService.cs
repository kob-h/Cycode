using System;
using System.Xml.Linq;
using Cycode.BusinessLogic;
using Cycode.BusinessServices.Mappers;
using Cycode.DataAccess;
using Cycode.DataContracts;
using Cycode.Utils;
using ScanRequestContract = Cycode.DataContracts.ScanRequest;
using ScanRequestModel = Cycode.Model.ScanRequest;

namespace Cycode.BusinessServices
{
	public class SecurityVulnerabilityService : ISecurityVulnerabilityService
    {
        private readonly ISecurityVulnerabilityRepository _securityVulnerabilityRepository;
        private readonly IScanRequestMapper _scanRequestMapper;
        private readonly IPackageVulnerabilityLogicManager _packageVulnerabilityLogicManager;

        public SecurityVulnerabilityService(
            IPackageVulnerabilityLogicManager packageVulnerabilityLogicManager,
            ISecurityVulnerabilityRepository securityVulnerabilityRepository,
            IScanRequestMapper scanRequestMapper)
		{

            _packageVulnerabilityLogicManager = packageVulnerabilityLogicManager;
            _securityVulnerabilityRepository = securityVulnerabilityRepository;
            _scanRequestMapper = scanRequestMapper;
        }

        public async Task<ScanResponse> Scan(ScanRequestContract scanRequestContract)
        {
            var scanRequestModel = _scanRequestMapper.Map(scanRequestContract);

            var securityVulnerabilityResponse = await _securityVulnerabilityRepository.GetData(scanRequestModel);
            var response = TransformDataToScanResponse(securityVulnerabilityResponse);

            return response;
        }

        private ScanResponse TransformDataToScanResponse(List<Model.VulnerabilityResponse> securityVulnerabilityResponse)
        {
            var response = new ScanResponse();
            securityVulnerabilityResponse.ForEach(svr =>
            {
                var packages = CheckForVulnerablePackages(svr);
                response.VulnerablePackages.AddRange(packages);
            });
            return response;
        }

        private List<VulnerablePackage> CheckForVulnerablePackages(Model.VulnerabilityResponse vr)
        {
            var vulnerablePackages = new List<VulnerablePackage>();

            var nodes = vr?.Data?.SecurityVulnerabilities?.Nodes ?? new Model.SecurityVulnerability[0];
            foreach (var node in nodes)
            {
                var vulnerableVersionRanges = node?.VulnerableVersionRange?.Split(",");
                var vulnerabilityReult = _packageVulnerabilityLogicManager.IsUsedVersionInVulnerableVersionRanges(vr.VersionInUse, vulnerableVersionRanges);

                if (vulnerabilityReult)
                {
                    vulnerablePackages.Add(CreateVulnerablePackageRecord(vr, node));
                }
            }

            return vulnerablePackages;
        }

        private static VulnerablePackage CreateVulnerablePackageRecord(Model.VulnerabilityResponse vr, Model.SecurityVulnerability node)
        {
            return new VulnerablePackage()
            {
                Name = node.Package.Name,
                Version = vr.VersionInUse,
                FirstPatchedVersion = node?.FirstPatchedVersion.Identifier,
                Severity = node.Severity
            };
        }
    }
}

