using System;
using System.Xml.Linq;
using Cycode.Controllers;
using Cycode.Model;
using GraphQL;
using GraphQL.Client.Abstractions;
using Newtonsoft.Json;
using static System.Net.Mime.MediaTypeNames;

namespace Cycode.DataAccess
{
	public class SecurityVulnerabilityRepository : ISecurityVulnerabilityRepository
    {
        private readonly IGraphQLClient _graphQLClient;

        public SecurityVulnerabilityRepository(IGraphQLClient graphQLClient)
		{
            _graphQLClient = graphQLClient;
        }

        public async Task<List<VulnerabilityResponse>> GetData(ScanRequest scanRequest)
        {
            var fileContent = JsonConvert.DeserializeObject<FileContent>(scanRequest.FileContent); 
            var dependencies = fileContent?.Dependencies;
           
            return await GetVulnerabilitiesFromGithub(scanRequest.Ecosystem, dependencies); ;
        }

        private async Task<List<VulnerabilityResponse>> GetVulnerabilitiesFromGithub(string ecoSystem, Dictionary<string, string>? dependencies)
        {
            var vulnerabilityResponses = new List<VulnerabilityResponse>();
            if (dependencies != null)
            {
                foreach (var kvp in dependencies)
                {
                    string query = FormatQuery(ecoSystem, kvp.Key);

                    var graphQlResponse = await _graphQLClient.SendQueryAsync<Data>(new GraphQLRequest
                    {
                        Query = query
                    });

                    vulnerabilityResponses.Add(new VulnerabilityResponse() { Data = graphQlResponse.Data, VersionInUse = kvp.Value });
                }
            }
            return vulnerabilityResponses;
        }

        private static string FormatQuery(string ecoSystem, string packageName)
        {
            var query = string.Format(@"
            {{
                securityVulnerabilities(ecosystem: {0}, first: 100, package: ""{1}"") {{
                    nodes {{
                        severity
                        package {{
                            name
                            ecosystem
                        }}
                        vulnerableVersionRange
                        firstPatchedVersion {{
                            identifier
                        }}
                    }}
                }}
            }}", ecoSystem, packageName);

            return query;
        }

    }

    public class FileContent
    {
        public Dictionary<string, string>? Dependencies { get; set; }
    }
}

