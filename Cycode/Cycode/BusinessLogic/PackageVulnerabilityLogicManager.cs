using System;
namespace Cycode.BusinessLogic
{
	public class PackageVulnerabilityLogicManager : IPackageVulnerabilityLogicManager
    {
        public bool IsUsedVersionInVulnerableVersionRanges(string usedVersion, string[] ranges)
        {
            var isPackageVulnerable = true;
            foreach (var range in ranges)
            {
                var splitRange = range.Trim().Split(" ");
                var logicOperator = splitRange[Constants.SplitRange.LOGIC_OPERATOR_INDEX];
                var vulnerablePackageVersion = splitRange[Constants.SplitRange.VULNERABLE_PACKAGE_VERSION_INDEX];

                if (!_logicOperationActions.ContainsKey(logicOperator))
                {
                    throw new Exception($"Unknown logic operator: {logicOperator}");
                }

                isPackageVulnerable = isPackageVulnerable && _logicOperationActions[logicOperator](usedVersion, vulnerablePackageVersion);
            }

            return isPackageVulnerable;
        }

        private Dictionary<string, Func<string, string, bool>> _logicOperationActions = new Dictionary<string, Func<string, string, bool>>
        {
            [Constants.LogicOperations.GREATER_THAN] = (a, b) => new Version(a) > new Version(b),
            [Constants.LogicOperations.GREATER_THAN_OR_EQUAL] = (a, b) => new Version(a) >= new Version(b),
            [Constants.LogicOperations.EQUAL] = (a, b) => new Version(a) == new Version(b),
            [Constants.LogicOperations.LESS_THAN] = (a, b) => new Version(a) < new Version(b),
            [Constants.LogicOperations.LESS_THAN_OR_EQUAL] = (a, b) => new Version(a) <= new Version(b)
        };

    }
}

